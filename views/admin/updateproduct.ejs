<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SNACK STORM</title>
    <link rel="stylesheet" href="/style/addproduct.css">
    <link rel="shortcut icon" href="/images/favicon.png" type="">
    <!-- Cropper.js -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

</head>

<body>
    <main class="content">
        <h1>Update Product</h1>

        <form id="updateProductForm" action="/admin/updateproduct/<%= product._id %>" method="POST"
            enctype="multipart/form-data" novalidate>
            <div class="form-group">
                <label for="productName">Product Name</label>
                <input type="text" id="productName" name="name" required minlength="3" maxlength="50"
                    value="<%= product.name %>">
                <div class="error-message" id="nameError"></div>
            </div>

            <div class="form-group">
                <label for="productDescription">Description</label>
                <textarea id="productDescription" name="description" required minlength="10"
                    maxlength="500"><%= product.description %></textarea>
                <div class="error-message" id="descriptionError"></div>
            </div>

            <div class="form-group">
                <label for="productCategory">Category</label>
                <select id="productCategory" name="category" required>
                    <option value="">Select Category</option>
                    <% categories.forEach(category => { %>
                        <option value="<%= category.name.toLowerCase() %>" 
                            <%= product.category.toLowerCase() === category.name.toLowerCase() ? 'selected' : '' %>>
                            <%= category.name %>
                        </option>
                    <% }); %>
                </select>
                <div class="error-message" id="categoryError"></div>
            </div>
            

            <div class="form-group">
                <label for="productStock">Stock</label>
                <input type="number" id="productStock" name="stock" required min="0" max="1000"
                    value="<%= product.stock %>">
                <div class="error-message" id="stockError"></div>
            </div>
            <div class="form-group">
                <label for="productPrice">Price</label>
                <input type="number" id="productPrice" name="price" required min="0" max="100000" step="0.01"
                    value="<%= product.price %>">
                <div class="error-message" id="priceError"></div>
            </div>

            <!-- Repeat for each image (1-3) -->
            <% for(let i=1; i <=3; i++) { %>
                <div class="form-group">
                    <label>Product Image <%= i %></label>
                    <% if(product.image && product.image[i-1]) { %>
                        <div class="current-image">
                            <img src="/uploads/<%= product.image[i-1] %>" alt="Current Image <%= i %>"
                                style="max-width: 100px;">

                        </div>
                        <% } %>
                            <input type="file" id="productImage<%= i %>" name="image<%= i %>" accept="image/*">
                            <div class="image-container" style="max-width: 100px; margin-top: 20px;">
                                <img id="previewImage<%= i %>" src="" style="max-width: 100%; display: none;">
                            </div>
                            <button type="button" id="cropButton<%= i %>" class="crop-btn" style="display: none;">Crop
                                Image</button>
                            <input type="hidden" name="croppedImage<%= i %>" id="croppedImage<%= i %>">
                            <input type="hidden" name="existingImage<%= i %>"
                                value="<%= product.image && product.image[i-1] ? product.image[i-1] : '' %>">
                </div>
                <% } %>

                    <button type="submit" class="submit-btn">Update Product</button>
        </form>
    </main>
    <!-- Sidebar -->
    <aside class="sidebar">
        <div class="sidebar-header">
            <a href="#" class="sidebar-logo">Admin Panel</a>
        </div>
        <nav>
            <ul class="nav-menu">
                <li class="nav-item">
                    <a href="/admin/dashboard" class="nav-link active">
                        <svg class="nav-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                        </svg>
                        Dashboard
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/admin/users" class="nav-link">
                        <svg class="nav-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                        </svg>
                        Users
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/admin/products" class="nav-link">
                        <svg class="nav-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
                        </svg>
                        Products
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/admin/order" class="nav-link">
                        <svg class="nav-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                        </svg>
                        Orders
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/admin/category" class="nav-link">
                        <svg class="nav-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                        </svg>
                        Categories
                    </a>
                </li>
                <li class="nav-item">
                    <a href="#" class="nav-link">
                        <svg class="nav-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M15 5v2m0 4v2m0 4v2M5 5a2 2 0 00-2 2v3a2 2 0 110 4v3a2 2 0 002 2h14a2 2 0 002-2v-3a2 2 0 110-4V7a2 2 0 00-2-2H5z" />
                        </svg>
                        Coupons
                    </a>
                </li>
            </ul>

            <!-- Bottom Menu -->
            <ul class="bottom-menu">
                <li class="nav-item">
                    <a href="#" class="nav-link">
                        <svg class="nav-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                        </svg>
                        Settings
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/admin/logout" class="nav-link logout-link">
                        <svg class="nav-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                        </svg>
                        Logout
                    </a>
                </li>
            </ul>
        </nav>
    </aside>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('updateProductForm');
            const croppers = {};

            // Validation rules
            const validationRules = {
                productName: {
                    required: true,
                    minLength: 3,
                    maxLength: 50,
                    pattern: /^[a-zA-Z0-9\s-]+$/,
                    errorMessages: {
                        required: 'Product name is required',
                        minLength: 'Product name must be at least 3 characters',
                        maxLength: 'Product name cannot exceed 50 characters',
                        pattern: 'Product name can only contain letters, numbers, spaces, and hyphens'
                    }
                },
                productDescription: {
                    required: true,
                    minLength: 10,
                    maxLength: 500,
                    errorMessages: {
                        required: 'Description is required',
                        minLength: 'Description must be at least 10 characters',
                        maxLength: 'Description cannot exceed 500 characters'
                    }
                },
                productCategory: {
                    required: true,
                    errorMessages: {
                        required: 'Please select a category'
                    }
                },
                productStock: {
                    required: true,
                    min: 0,
                    max: 1000,
                    pattern: /^\d+$/,
                    errorMessages: {
                        required: 'Stock quantity is required',
                        min: 'Stock cannot be negative',
                        max: 'Stock cannot exceed 1000',
                        pattern: 'Stock must be a whole number'
                    }
                },
                productPrice: {
                    required: true,
                    min: 0,
                    max: 100000,
                    pattern: /^\d+(\.\d{1,2})?$/,
                    errorMessages: {
                        required: 'Price is required',
                        min: 'Price cannot be negative',
                        max: 'Price cannot exceed 100000',
                        pattern: 'Price must be a valid number with up to 2 decimal places'
                    }
                }
            };

            // Function to validate a single field
            function validateField(field) {
                const rules = validationRules[field.id];
                const errorElement = document.getElementById(`${field.name}Error`);
                const formGroup = field.closest('.form-group');
                let isValid = true;
                let errorMessage = '';

                if (rules.required && !field.value.trim()) {
                    isValid = false;
                    errorMessage = rules.errorMessages.required;
                } else if (rules.minLength && field.value.length < rules.minLength) {
                    isValid = false;
                    errorMessage = rules.errorMessages.minLength;
                } else if (rules.maxLength && field.value.length > rules.maxLength) {
                    isValid = false;
                    errorMessage = rules.errorMessages.maxLength;
                } else if (rules.pattern && !rules.pattern.test(field.value)) {
                    isValid = false;
                    errorMessage = rules.errorMessages.pattern;
                } else if (rules.min !== undefined && Number(field.value) < rules.min) {
                    isValid = false;
                    errorMessage = rules.errorMessages.min;
                } else if (rules.max !== undefined && Number(field.value) > rules.max) {
                    isValid = false;
                    errorMessage = rules.errorMessages.max;
                }

                if (!isValid) {
                    formGroup.classList.add('error');
                    errorElement.textContent = errorMessage;
                } else {
                    formGroup.classList.remove('error');
                    errorElement.textContent = '';
                }

                return isValid;
            }

            // Setup image cropper
            function setupImageCropper(number) {
                const imageInput = document.getElementById(`productImage${number}`);
                const previewImage = document.getElementById(`previewImage${number}`);
                const cropButton = document.getElementById(`cropButton${number}`);
                const currentImageDiv = imageInput.closest('.form-group').querySelector('.current-image img');

                // If there's an existing image, show it in preview
                if (currentImageDiv) {
                    previewImage.src = currentImageDiv.src;
                    previewImage.style.display = 'none'; // Keep it hidden initially
                }

                imageInput.addEventListener('change', function (e) {
                    const file = e.target.files[0];
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = function (event) {
                            previewImage.src = event.target.result;
                            previewImage.style.display = 'block';
                            cropButton.style.display = 'block';

                            if (croppers[`cropper${number}`]) {
                                croppers[`cropper${number}`].destroy();
                            }

                            croppers[`cropper${number}`] = new Cropper(previewImage, {
                                aspectRatio: NaN,
                                viewMode: 0,
                                autoCrop: true
                            });

                            // Hide current image if exists
                            if (currentImageDiv) {
                                currentImageDiv.closest('.current-image').style.display = 'none';
                            }
                        };
                        reader.readAsDataURL(file);
                    }
                });

                cropButton.addEventListener('click', function () {
                    if (croppers[`cropper${number}`]) {
                        const canvas = croppers[`cropper${number}`].getCroppedCanvas();

                        if (!canvas) {
                            console.error(`Cropping failed: No canvas generated for Image ${number}`);
                            return;
                        }

                        const croppedDataUrl = canvas.toDataURL();


                        const croppedInput = document.getElementById(`croppedImage${number}`);

                        if (!croppedInput) {
                            console.error(`Hidden input #croppedImage${number} not found!`);
                            return;
                        }

                        croppedInput.value = croppedDataUrl;
                        previewImage.src = croppedDataUrl;
                        croppers[`cropper${number}`].destroy();
                        croppers[`cropper${number}`] = null;
                        cropButton.style.display = 'none';

                        Swal.fire({
                            title: 'Success!',
                            text: `Image ${number} has been cropped successfully!`,
                            icon: 'success',
                            timer: 2000,
                            showConfirmButton: false
                        });
                    } else {
                        console.warn(`Cropper for Image ${number} does not exist.`);
                    }
                });
            }

            // Setup croppers for all three images
            setupImageCropper(1);
            setupImageCropper(2);
            setupImageCropper(3);

            // Add validation on input/change
            Object.keys(validationRules).forEach(fieldId => {
                const field = document.getElementById(fieldId);
                field.addEventListener('input', () => validateField(field));
                field.addEventListener('blur', () => validateField(field));
            });

            // Validate images
            async function validateImages() {
                let isValid = true;
                const requiredImages = 1;
                let imageCount = 0;

                for (let i = 1; i <= 3; i++) {
                    const imageInput = document.getElementById(`productImage${i}`);
                    const croppedImage = document.getElementById(`croppedImage${i}`);
                    const existingImage = document.querySelector(`input[name="existingImage${i}"]`);

                    // Count existing images that haven't been removed
                    if (existingImage && existingImage.value) {
                        imageCount++;
                    }

                    if (imageInput.files.length > 0) {
                        imageCount++;
                        if (!croppedImage.value) {
                            await Swal.fire({
                                title: 'Image Not Cropped',
                                text: `Please crop Image ${i} before submitting.`,
                                icon: 'warning'
                            });
                            isValid = false;
                        }
                        if (imageInput.files[0].size > 10 * 1024 * 1024) {
                            await Swal.fire({
                                title: 'File Too Large',
                                text: `Image ${i} exceeds maximum size of 5MB.`,
                                icon: 'error'
                            });
                            isValid = false;
                        }
                        const validTypes = ['image/jpeg', 'image/png', 'image/webp'];
                        if (!validTypes.includes(imageInput.files[0].type)) {
                            await Swal.fire({
                                title: 'Invalid File Type',
                                text: `Image ${i} must be in JPG, PNG, or WebP format.`,
                                icon: 'error'
                            });
                            isValid = false;
                        }
                    }
                }

                if (imageCount < requiredImages) {
                    await Swal.fire({
                        title: 'Images Required',
                        text: `Please have at least ${requiredImages} image(s).`,
                        icon: 'warning'
                    });
                    isValid = false;
                }

                return isValid;
            }

            // Form submission handler
            form.addEventListener('submit', async function (e) {
                e.preventDefault();

                let isValid = true;
                Object.keys(validationRules).forEach(fieldId => {
                    if (!validateField(document.getElementById(fieldId))) {
                        isValid = false;
                    }
                });

                if (!await validateImages()) {
                    isValid = false;
                }

                if (isValid) {
                    Swal.fire({
                        title: 'Updating...',
                        text: 'Please wait while we update your product.',
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    try {
                        const formData = new FormData(form);

                        // Add cropped image data to FormData if they exist
                        for (let i = 1; i <= 3; i++) {
                            const croppedImage = document.getElementById(`croppedImage${i}`).value;
                            if (croppedImage) {
                                formData.append(`croppedImage${i}`, croppedImage);
                            }
                        }

                        // Convert FormData to object
                        const formDataObj = {};
                        formData.forEach((value, key) => {
                            formDataObj[key] = value;
                        });

                        const response = await fetch(form.action, {
                            method: 'POST',
                            body: formData,
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(formDataObj)
                        });
                        if (response.ok) {
                            await Swal.fire({
                                title: 'Success!',
                                text: 'Product updated successfully',
                                icon: 'success'
                            });
                            window.location.href = '/admin/products';
                        } else {
                            const error = await response.json();
                            throw new Error(error.message);
                        }
                    } catch (error) {
                        await Swal.fire({
                            title: 'Error!',
                            text: error.message||'There was a problem updating the product. Please try again.',
                            icon: 'error'
                        });
                    }
                } else {
                    await Swal.fire({
                        title: 'Validation Error',
                        text: 'Please check the form for errors and try again.',
                        icon: 'error'
                    });

                    const firstError = document.querySelector('.form-group.error');
                    if (firstError) {
                        firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }
                }
            });
        });
    </script>
</body>

</html>